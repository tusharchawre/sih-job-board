// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  student       Student?
  isAdmin       Boolean   @default(false)
  name          String
  emailVerified Boolean   @default(false)
  image         String?
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Job {
  id             String        @id @default(uuid())
  jobTitle       String
  jobDescription String
  skillRequired  String[]
  jobType        JOB_TYPE
  salaryMin      Int?
  salaryMax      Int?
  applications   Application[]
  createdAt      DateTime      @default(now())
}

enum JOB_TYPE {
  INTERNSHIP
  FULL_TIME
  PART_TIME
  CONTRACT
}

model Student {
  id                String           @id @default(uuid())
  name              String
  ien               Int?
  branch            BRANCH
  yearofStudy       YEAROFSTUDY
  resumeUrl         String?
  cgpa              Float?
  percentage10th    Float?
  percentage12th    Float?
  phoneNumber       Int?
  skills            String[]
  certifications    Certification[]
  applications      Application[]
  projects          Projects[]
  githubUrl         String?
  linkedinUrl       String?
  twitterUrl        String?
  workExperiences   workExperience[]
  bio               String?
  portfolioUrl      String?
  isProfileComplete Boolean          @default(false)
  user              User             @relation(fields: [userId], references: [id])
  userId            String           @unique
}

enum BRANCH {
  CSD
  AIDS
  COMPS
  CIVIL
  MTRX
  MECH
}

enum YEAROFSTUDY {
  FE
  SE
  TE
  BE
}

model Application {
  id              String             @id @default(uuid())
  student         Student            @relation(fields: [studentId], references: [id])
  studentId       String
  job             Job                @relation(fields: [jobId], references: [id])
  jobId           String
  applicationDate DateTime           @default(now())
  status          APPLICATION_STATUS @default(APPLIED)

  @@unique([studentId, jobId])
}

enum APPLICATION_STATUS {
  APPLIED
  UNDER_REVIEW
  REJECTED
  ACCEPTED
  INTERVIEW_SCHEDULED
  OFFERED
  WITHDRAWN
}

model Projects {
  id          String  @id @default(uuid())
  title       String
  description String
  link        String?
  student     Student @relation(fields: [studentId], references: [id])
  studentId   String
}

model Certification {
  id          String  @id @default(uuid())
  title       String
  description String
  link        String?
  student     Student @relation(fields: [studentId], references: [id])
  studentId   String
}

model workExperience {
  id               String    @id @default(uuid())
  companyName      String
  role             String
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean   @default(false)
  description      String
  student          Student   @relation(fields: [studentId], references: [id])
  studentId        String
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
